---
import avatar from "@/assets/avatar.svg";
import Layout from "@/layouts/Article.astro";
import Post from "@/components/post.astro";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

if (!session) return Astro.redirect("/signin");

const { API_URL } = import.meta.env;
let posts = [];

try {
  const response = await fetch(`${API_URL}/posts`, {
    method: "GET",
    headers: {
      "Content-type": "application/json",
    },
  });

  if (!response.ok) {
    console.error(
      "Error fetching posts:",
      response.status,
      response.statusText
    );
    posts = [];
  } else {
    posts = await response.json();
  }
} catch (error) {
  console.error("Fetch error:", error);
  posts = [];
}
---

<Layout title="HOME - SnapVerse">
  <div class="w-full max-w-[640px] mt-10 rounded-3xl py-2 container">
    <div class="mt-6 flex flex-col items-center w-full h-[calc(100vh-3rem)]">
      <section class="flex gap-2 px-4 pb-6 w-full">
        <form id="post" method="POST" class="flex-grow flex items-center">
          <div
            class="rounded-full w-9 h-9 overflow-hidden flex justify-center items-center bg-orange-500"
          >
            <img
              class="w-2/4 h-2/4 object-cover"
              src={avatar.src}
              alt="avatar image"
            />
          </div>

          <!-- Textarea  -->
          <textarea
            name="body"
            class="flex-grow h-9 pt-1 rounded-md bg-transparent placeholder-[#777777] border-0 mx-2 resize-none overflow-y-auto"
            placeholder="¿Qué hay de nuevo?"
            maxlength="250"
            oninput="this.style.height = 'auto'; this.style.height = Math.min(this.scrollHeight, 400) + 'px';"
            style="max-height: 600px;"></textarea>

          <!-- Botón de envío -->
          <button
            type="submit"
            class="border border-[#f3f5f726] rounded-[10px] transition duration-200 flex items-center justify-center h-9 px-4"
          >
            <div class="text-sm">Post</div>
          </button>
        </form>
      </section>
      <hr class="separator w-full h-[0.5px]" />
      <section class="w-full">
        <!-- POST -->
        {
          Array.isArray(posts.data) && posts.data.length > 0 ? (
            posts.data.map((post: any) => (
              <Post
                name={post.user?.name || "Anonymous"}
                body={post.body || "Contenido del post"}
              />
            ))
          ) : (
            <div class="w-full text-center mt-6">
              No hay publicaciones disponibles.
            </div>
          )
        }
      </section>
    </div>
  </div>
</Layout>

<style>
  .container {
    background-color: hsl(0, 0%, 9%);
    max-height: calc(100vh - 6.5rem);
  }
  hr {
    border: none;
    background: #dadde1;
  }
  .separator {
    background-color: hsla(210, 20%, 96%, 0.15);
  }

  textarea::placeholder {
    color: #777777;
  }

  textarea:focus {
    outline: none;
  }
</style>

<script>
  const baseURL = import.meta.env.PUBLIC_API_URL;
  const form = document.getElementById("post");

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    // Envía el formulario
    const response = await fetch(`${baseURL}/posts`, {
      method: "POST",
      headers: {
        "Content-type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      console.log("Publicación exitosa");
      form.reset();
    } else {
      console.error("Error al publicar", await response.text());
    }
  });
</script>
